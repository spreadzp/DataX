//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceDictonary", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServiceDictonary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/FindTranslate", ReplyAction="http://tempuri.org/IServiceDictonary/FindTranslateResponse")]
        string[] FindTranslate(int roomDictionary, string searchWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/FindTranslate", ReplyAction="http://tempuri.org/IServiceDictonary/FindTranslateResponse")]
        System.Threading.Tasks.Task<string[]> FindTranslateAsync(int roomDictionary, string searchWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/ConnectClient", ReplyAction="http://tempuri.org/IServiceDictonary/ConnectClientResponse")]
        bool ConnectClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/ConnectClient", ReplyAction="http://tempuri.org/IServiceDictonary/ConnectClientResponse")]
        System.Threading.Tasks.Task<bool> ConnectClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/UpdateWords", ReplyAction="http://tempuri.org/IServiceDictonary/UpdateWordsResponse")]
        bool UpdateWords(int roomDictionary, string updateSearchWord, string[] updateWordsTranslate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/UpdateWords", ReplyAction="http://tempuri.org/IServiceDictonary/UpdateWordsResponse")]
        System.Threading.Tasks.Task<bool> UpdateWordsAsync(int roomDictionary, string updateSearchWord, string[] updateWordsTranslate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/AddWord", ReplyAction="http://tempuri.org/IServiceDictonary/AddWordResponse")]
        bool AddWord(int roomDictionary, string newWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/AddWord", ReplyAction="http://tempuri.org/IServiceDictonary/AddWordResponse")]
        System.Threading.Tasks.Task<bool> AddWordAsync(int roomDictionary, string newWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/DeleteWord", ReplyAction="http://tempuri.org/IServiceDictonary/DeleteWordResponse")]
        bool DeleteWord(int roomDictionary, [System.ServiceModel.MessageParameterAttribute(Name="deleteWord")] string deleteWord1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDictonary/DeleteWord", ReplyAction="http://tempuri.org/IServiceDictonary/DeleteWordResponse")]
        System.Threading.Tasks.Task<bool> DeleteWordAsync(int roomDictionary, string deleteWord);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IServiceDictonary/DisconnectClient")]
        void DisconnectClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IServiceDictonary/DisconnectClient")]
        System.Threading.Tasks.Task DisconnectClientAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDictonaryChannel : Client.ServiceReference1.IServiceDictonary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDictonaryClient : System.ServiceModel.ClientBase<Client.ServiceReference1.IServiceDictonary>, Client.ServiceReference1.IServiceDictonary {
        
        public ServiceDictonaryClient() {
        }
        
        public ServiceDictonaryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDictonaryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDictonaryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDictonaryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] FindTranslate(int roomDictionary, string searchWord) {
            return base.Channel.FindTranslate(roomDictionary, searchWord);
        }
        
        public System.Threading.Tasks.Task<string[]> FindTranslateAsync(int roomDictionary, string searchWord) {
            return base.Channel.FindTranslateAsync(roomDictionary, searchWord);
        }
        
        public bool ConnectClient() {
            return base.Channel.ConnectClient();
        }
        
        public System.Threading.Tasks.Task<bool> ConnectClientAsync() {
            return base.Channel.ConnectClientAsync();
        }
        
        public bool UpdateWords(int roomDictionary, string updateSearchWord, string[] updateWordsTranslate) {
            return base.Channel.UpdateWords(roomDictionary, updateSearchWord, updateWordsTranslate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateWordsAsync(int roomDictionary, string updateSearchWord, string[] updateWordsTranslate) {
            return base.Channel.UpdateWordsAsync(roomDictionary, updateSearchWord, updateWordsTranslate);
        }
        
        public bool AddWord(int roomDictionary, string newWord) {
            return base.Channel.AddWord(roomDictionary, newWord);
        }
        
        public System.Threading.Tasks.Task<bool> AddWordAsync(int roomDictionary, string newWord) {
            return base.Channel.AddWordAsync(roomDictionary, newWord);
        }
        
        public bool DeleteWord(int roomDictionary, string deleteWord1) {
            return base.Channel.DeleteWord(roomDictionary, deleteWord1);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWordAsync(int roomDictionary, string deleteWord) {
            return base.Channel.DeleteWordAsync(roomDictionary, deleteWord);
        }
        
        public void DisconnectClient() {
            base.Channel.DisconnectClient();
        }
        
        public System.Threading.Tasks.Task DisconnectClientAsync() {
            return base.Channel.DisconnectClientAsync();
        }
    }
}
